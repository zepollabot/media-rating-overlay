// Code generated by mockery. DO NOT EDIT.

package rating_mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// FilterService is an autogenerated mock type for the FilterService type
type FilterService struct {
	mock.Mock
}

type FilterService_Expecter struct {
	mock *mock.Mock
}

func (_m *FilterService) EXPECT() *FilterService_Expecter {
	return &FilterService_Expecter{mock: &_m.Mock}
}

// ApplyFiltersToRequest provides a mock function with given fields: request, filters
func (_m *FilterService) ApplyFiltersToRequest(request *http.Request, filters []model.Filter) {
	_m.Called(request, filters)
}

// FilterService_ApplyFiltersToRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyFiltersToRequest'
type FilterService_ApplyFiltersToRequest_Call struct {
	*mock.Call
}

// ApplyFiltersToRequest is a helper method to define mock.On call
//   - request *http.Request
//   - filters []model.Filter
func (_e *FilterService_Expecter) ApplyFiltersToRequest(request interface{}, filters interface{}) *FilterService_ApplyFiltersToRequest_Call {
	return &FilterService_ApplyFiltersToRequest_Call{Call: _e.mock.On("ApplyFiltersToRequest", request, filters)}
}

func (_c *FilterService_ApplyFiltersToRequest_Call) Run(run func(request *http.Request, filters []model.Filter)) *FilterService_ApplyFiltersToRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].([]model.Filter))
	})
	return _c
}

func (_c *FilterService_ApplyFiltersToRequest_Call) Return() *FilterService_ApplyFiltersToRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *FilterService_ApplyFiltersToRequest_Call) RunAndReturn(run func(*http.Request, []model.Filter)) *FilterService_ApplyFiltersToRequest_Call {
	_c.Run(run)
	return _c
}

// NewFilterService creates a new instance of FilterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterService {
	mock := &FilterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
