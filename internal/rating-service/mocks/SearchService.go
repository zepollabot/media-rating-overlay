// Code generated by mockery. DO NOT EDIT.

package rating_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

type SearchService_Expecter struct {
	mock *mock.Mock
}

func (_m *SearchService) EXPECT() *SearchService_Expecter {
	return &SearchService_Expecter{mock: &_m.Mock}
}

// GetResults provides a mock function with given fields: ctx, item
func (_m *SearchService) GetResults(ctx context.Context, item model.Item) ([]model.SearchResult, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for GetResults")
	}

	var r0 []model.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Item) ([]model.SearchResult, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Item) []model.SearchResult); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchService_GetResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResults'
type SearchService_GetResults_Call struct {
	*mock.Call
}

// GetResults is a helper method to define mock.On call
//   - ctx context.Context
//   - item model.Item
func (_e *SearchService_Expecter) GetResults(ctx interface{}, item interface{}) *SearchService_GetResults_Call {
	return &SearchService_GetResults_Call{Call: _e.mock.On("GetResults", ctx, item)}
}

func (_c *SearchService_GetResults_Call) Run(run func(ctx context.Context, item model.Item)) *SearchService_GetResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Item))
	})
	return _c
}

func (_c *SearchService_GetResults_Call) Return(_a0 []model.SearchResult, _a1 error) *SearchService_GetResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SearchService_GetResults_Call) RunAndReturn(run func(context.Context, model.Item) ([]model.SearchResult, error)) *SearchService_GetResults_Call {
	_c.Call.Return(run)
	return _c
}

// NewSearchService creates a new instance of SearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchService {
	mock := &SearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
