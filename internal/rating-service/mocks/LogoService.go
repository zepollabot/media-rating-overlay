// Code generated by mockery. DO NOT EDIT.

package rating_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// LogoService is an autogenerated mock type for the LogoService type
type LogoService struct {
	mock.Mock
}

type LogoService_Expecter struct {
	mock *mock.Mock
}

func (_m *LogoService) EXPECT() *LogoService_Expecter {
	return &LogoService_Expecter{mock: &_m.Mock}
}

// GetLogos provides a mock function with given fields: ctx, ratings, itemID, dimensions
func (_m *LogoService) GetLogos(ctx context.Context, ratings []model.Rating, itemID string, dimensions model.LogoDimensions) ([]*model.Logo, error) {
	ret := _m.Called(ctx, ratings, itemID, dimensions)

	if len(ret) == 0 {
		panic("no return value specified for GetLogos")
	}

	var r0 []*model.Logo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Rating, string, model.LogoDimensions) ([]*model.Logo, error)); ok {
		return rf(ctx, ratings, itemID, dimensions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.Rating, string, model.LogoDimensions) []*model.Logo); ok {
		r0 = rf(ctx, ratings, itemID, dimensions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Logo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.Rating, string, model.LogoDimensions) error); ok {
		r1 = rf(ctx, ratings, itemID, dimensions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoService_GetLogos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogos'
type LogoService_GetLogos_Call struct {
	*mock.Call
}

// GetLogos is a helper method to define mock.On call
//   - ctx context.Context
//   - ratings []model.Rating
//   - itemID string
//   - dimensions model.LogoDimensions
func (_e *LogoService_Expecter) GetLogos(ctx interface{}, ratings interface{}, itemID interface{}, dimensions interface{}) *LogoService_GetLogos_Call {
	return &LogoService_GetLogos_Call{Call: _e.mock.On("GetLogos", ctx, ratings, itemID, dimensions)}
}

func (_c *LogoService_GetLogos_Call) Run(run func(ctx context.Context, ratings []model.Rating, itemID string, dimensions model.LogoDimensions)) *LogoService_GetLogos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]model.Rating), args[2].(string), args[3].(model.LogoDimensions))
	})
	return _c
}

func (_c *LogoService_GetLogos_Call) Return(_a0 []*model.Logo, _a1 error) *LogoService_GetLogos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogoService_GetLogos_Call) RunAndReturn(run func(context.Context, []model.Rating, string, model.LogoDimensions) ([]*model.Logo, error)) *LogoService_GetLogos_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogoService creates a new instance of LogoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoService {
	mock := &LogoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
