// Code generated by mockery. DO NOT EDIT.

package tmdb_mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// LogoCreator is an autogenerated mock type for the LogoCreator type
type LogoCreator struct {
	mock.Mock
}

type LogoCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *LogoCreator) EXPECT() *LogoCreator_Expecter {
	return &LogoCreator_Expecter{mock: &_m.Mock}
}

// CreateLogo provides a mock function with given fields: imagePath, text, dimensions
func (_m *LogoCreator) CreateLogo(imagePath string, text string, dimensions model.LogoDimensions) (*model.Logo, error) {
	ret := _m.Called(imagePath, text, dimensions)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogo")
	}

	var r0 *model.Logo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, model.LogoDimensions) (*model.Logo, error)); ok {
		return rf(imagePath, text, dimensions)
	}
	if rf, ok := ret.Get(0).(func(string, string, model.LogoDimensions) *model.Logo); ok {
		r0 = rf(imagePath, text, dimensions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Logo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, model.LogoDimensions) error); ok {
		r1 = rf(imagePath, text, dimensions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoCreator_CreateLogo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogo'
type LogoCreator_CreateLogo_Call struct {
	*mock.Call
}

// CreateLogo is a helper method to define mock.On call
//   - imagePath string
//   - text string
//   - dimensions model.LogoDimensions
func (_e *LogoCreator_Expecter) CreateLogo(imagePath interface{}, text interface{}, dimensions interface{}) *LogoCreator_CreateLogo_Call {
	return &LogoCreator_CreateLogo_Call{Call: _e.mock.On("CreateLogo", imagePath, text, dimensions)}
}

func (_c *LogoCreator_CreateLogo_Call) Run(run func(imagePath string, text string, dimensions model.LogoDimensions)) *LogoCreator_CreateLogo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(model.LogoDimensions))
	})
	return _c
}

func (_c *LogoCreator_CreateLogo_Call) Return(_a0 *model.Logo, _a1 error) *LogoCreator_CreateLogo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogoCreator_CreateLogo_Call) RunAndReturn(run func(string, string, model.LogoDimensions) (*model.Logo, error)) *LogoCreator_CreateLogo_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogoCreator creates a new instance of LogoCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoCreator {
	mock := &LogoCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
