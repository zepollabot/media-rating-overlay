// Code generated by mockery. DO NOT EDIT.

package factory_mocks

import (
	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	media "github.com/zepollabot/media-rating-overlay/internal/media-service"

	mock "github.com/stretchr/testify/mock"
)

// MediaServiceBaseFactory is an autogenerated mock type for the MediaServiceBaseFactory type
type MediaServiceBaseFactory struct {
	mock.Mock
}

type MediaServiceBaseFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaServiceBaseFactory) EXPECT() *MediaServiceBaseFactory_Expecter {
	return &MediaServiceBaseFactory_Expecter{mock: &_m.Mock}
}

// BuildPlexComponents provides a mock function with no fields
func (_m *MediaServiceBaseFactory) BuildPlexComponents() (media.MediaClient, media.LibraryService, media.ItemService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildPlexComponents")
	}

	var r0 media.MediaClient
	var r1 media.LibraryService
	var r2 media.ItemService
	var r3 error
	if rf, ok := ret.Get(0).(func() (media.MediaClient, media.LibraryService, media.ItemService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() media.MediaClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(media.MediaClient)
		}
	}

	if rf, ok := ret.Get(1).(func() media.LibraryService); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(media.LibraryService)
		}
	}

	if rf, ok := ret.Get(2).(func() media.ItemService); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(media.ItemService)
		}
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MediaServiceBaseFactory_BuildPlexComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildPlexComponents'
type MediaServiceBaseFactory_BuildPlexComponents_Call struct {
	*mock.Call
}

// BuildPlexComponents is a helper method to define mock.On call
func (_e *MediaServiceBaseFactory_Expecter) BuildPlexComponents() *MediaServiceBaseFactory_BuildPlexComponents_Call {
	return &MediaServiceBaseFactory_BuildPlexComponents_Call{Call: _e.mock.On("BuildPlexComponents")}
}

func (_c *MediaServiceBaseFactory_BuildPlexComponents_Call) Run(run func()) *MediaServiceBaseFactory_BuildPlexComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MediaServiceBaseFactory_BuildPlexComponents_Call) Return(_a0 media.MediaClient, _a1 media.LibraryService, _a2 media.ItemService, _a3 error) *MediaServiceBaseFactory_BuildPlexComponents_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MediaServiceBaseFactory_BuildPlexComponents_Call) RunAndReturn(run func() (media.MediaClient, media.LibraryService, media.ItemService, error)) *MediaServiceBaseFactory_BuildPlexComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraries provides a mock function with no fields
func (_m *MediaServiceBaseFactory) GetLibraries() []config.Library {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLibraries")
	}

	var r0 []config.Library
	if rf, ok := ret.Get(0).(func() []config.Library); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.Library)
		}
	}

	return r0
}

// MediaServiceBaseFactory_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type MediaServiceBaseFactory_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
func (_e *MediaServiceBaseFactory_Expecter) GetLibraries() *MediaServiceBaseFactory_GetLibraries_Call {
	return &MediaServiceBaseFactory_GetLibraries_Call{Call: _e.mock.On("GetLibraries")}
}

func (_c *MediaServiceBaseFactory_GetLibraries_Call) Run(run func()) *MediaServiceBaseFactory_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MediaServiceBaseFactory_GetLibraries_Call) Return(_a0 []config.Library) *MediaServiceBaseFactory_GetLibraries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaServiceBaseFactory_GetLibraries_Call) RunAndReturn(run func() []config.Library) *MediaServiceBaseFactory_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// NewMediaServiceBaseFactory creates a new instance of MediaServiceBaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaServiceBaseFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaServiceBaseFactory {
	mock := &MediaServiceBaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
