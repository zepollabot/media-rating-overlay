// Code generated by mockery. DO NOT EDIT.

package factory_mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/rating-service/model"
)

// RatingServiceBaseFactory is an autogenerated mock type for the RatingServiceBaseFactory type
type RatingServiceBaseFactory struct {
	mock.Mock
}

type RatingServiceBaseFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *RatingServiceBaseFactory) EXPECT() *RatingServiceBaseFactory_Expecter {
	return &RatingServiceBaseFactory_Expecter{mock: &_m.Mock}
}

// BuildIMDBComponents provides a mock function with no fields
func (_m *RatingServiceBaseFactory) BuildIMDBComponents() (model.RatingService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildIMDBComponents")
	}

	var r0 model.RatingService
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.RatingService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.RatingService); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RatingService)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RatingServiceBaseFactory_BuildIMDBComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildIMDBComponents'
type RatingServiceBaseFactory_BuildIMDBComponents_Call struct {
	*mock.Call
}

// BuildIMDBComponents is a helper method to define mock.On call
func (_e *RatingServiceBaseFactory_Expecter) BuildIMDBComponents() *RatingServiceBaseFactory_BuildIMDBComponents_Call {
	return &RatingServiceBaseFactory_BuildIMDBComponents_Call{Call: _e.mock.On("BuildIMDBComponents")}
}

func (_c *RatingServiceBaseFactory_BuildIMDBComponents_Call) Run(run func()) *RatingServiceBaseFactory_BuildIMDBComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RatingServiceBaseFactory_BuildIMDBComponents_Call) Return(_a0 model.RatingService, _a1 error) *RatingServiceBaseFactory_BuildIMDBComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RatingServiceBaseFactory_BuildIMDBComponents_Call) RunAndReturn(run func() (model.RatingService, error)) *RatingServiceBaseFactory_BuildIMDBComponents_Call {
	_c.Call.Return(run)
	return _c
}

// BuildRottenTomatoesComponents provides a mock function with no fields
func (_m *RatingServiceBaseFactory) BuildRottenTomatoesComponents() (model.RatingService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildRottenTomatoesComponents")
	}

	var r0 model.RatingService
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.RatingService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.RatingService); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RatingService)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildRottenTomatoesComponents'
type RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call struct {
	*mock.Call
}

// BuildRottenTomatoesComponents is a helper method to define mock.On call
func (_e *RatingServiceBaseFactory_Expecter) BuildRottenTomatoesComponents() *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call {
	return &RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call{Call: _e.mock.On("BuildRottenTomatoesComponents")}
}

func (_c *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call) Run(run func()) *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call) Return(_a0 model.RatingService, _a1 error) *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call) RunAndReturn(run func() (model.RatingService, error)) *RatingServiceBaseFactory_BuildRottenTomatoesComponents_Call {
	_c.Call.Return(run)
	return _c
}

// BuildTMDBComponents provides a mock function with no fields
func (_m *RatingServiceBaseFactory) BuildTMDBComponents() (model.RatingService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildTMDBComponents")
	}

	var r0 model.RatingService
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.RatingService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.RatingService); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RatingService)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RatingServiceBaseFactory_BuildTMDBComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildTMDBComponents'
type RatingServiceBaseFactory_BuildTMDBComponents_Call struct {
	*mock.Call
}

// BuildTMDBComponents is a helper method to define mock.On call
func (_e *RatingServiceBaseFactory_Expecter) BuildTMDBComponents() *RatingServiceBaseFactory_BuildTMDBComponents_Call {
	return &RatingServiceBaseFactory_BuildTMDBComponents_Call{Call: _e.mock.On("BuildTMDBComponents")}
}

func (_c *RatingServiceBaseFactory_BuildTMDBComponents_Call) Run(run func()) *RatingServiceBaseFactory_BuildTMDBComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RatingServiceBaseFactory_BuildTMDBComponents_Call) Return(_a0 model.RatingService, _a1 error) *RatingServiceBaseFactory_BuildTMDBComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RatingServiceBaseFactory_BuildTMDBComponents_Call) RunAndReturn(run func() (model.RatingService, error)) *RatingServiceBaseFactory_BuildTMDBComponents_Call {
	_c.Call.Return(run)
	return _c
}

// NewRatingServiceBaseFactory creates a new instance of RatingServiceBaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingServiceBaseFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingServiceBaseFactory {
	mock := &RatingServiceBaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
