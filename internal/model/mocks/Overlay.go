// Code generated by mockery. DO NOT EDIT.

package model_mocks

import (
	gg "github.com/fogleman/gg"
	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	image "image"

	mock "github.com/stretchr/testify/mock"
)

// Overlay is an autogenerated mock type for the Overlay type
type Overlay struct {
	mock.Mock
}

type Overlay_Expecter struct {
	mock *mock.Mock
}

func (_m *Overlay) EXPECT() *Overlay_Expecter {
	return &Overlay_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: img, dc, _a2
func (_m *Overlay) Apply(img image.Image, dc *gg.Context, _a2 *config.Library) {
	_m.Called(img, dc, _a2)
}

// Overlay_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Overlay_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - img image.Image
//   - dc *gg.Context
//   - _a2 *config.Library
func (_e *Overlay_Expecter) Apply(img interface{}, dc interface{}, _a2 interface{}) *Overlay_Apply_Call {
	return &Overlay_Apply_Call{Call: _e.mock.On("Apply", img, dc, _a2)}
}

func (_c *Overlay_Apply_Call) Run(run func(img image.Image, dc *gg.Context, _a2 *config.Library)) *Overlay_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Image), args[1].(*gg.Context), args[2].(*config.Library))
	})
	return _c
}

func (_c *Overlay_Apply_Call) Return() *Overlay_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *Overlay_Apply_Call) RunAndReturn(run func(image.Image, *gg.Context, *config.Library)) *Overlay_Apply_Call {
	_c.Run(run)
	return _c
}

// NewOverlay creates a new instance of Overlay. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOverlay(t interface {
	mock.TestingT
	Cleanup(func())
}) *Overlay {
	mock := &Overlay{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
