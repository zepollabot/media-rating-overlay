// Code generated by mockery. DO NOT EDIT.

package plex_mocks

import (
	context "context"

	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// ItemService is an autogenerated mock type for the ItemService type
type ItemService struct {
	mock.Mock
}

type ItemService_Expecter struct {
	mock *mock.Mock
}

func (_m *ItemService) EXPECT() *ItemService_Expecter {
	return &ItemService_Expecter{mock: &_m.Mock}
}

// GetItems provides a mock function with given fields: ctx, library, _a2
func (_m *ItemService) GetItems(ctx context.Context, library model.Library, _a2 *config.Library) ([]model.Item, error) {
	ret := _m.Called(ctx, library, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Library, *config.Library) ([]model.Item, error)); ok {
		return rf(ctx, library, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Library, *config.Library) []model.Item); ok {
		r0 = rf(ctx, library, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Library, *config.Library) error); ok {
		r1 = rf(ctx, library, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemService_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type ItemService_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - library model.Library
//   - _a2 *config.Library
func (_e *ItemService_Expecter) GetItems(ctx interface{}, library interface{}, _a2 interface{}) *ItemService_GetItems_Call {
	return &ItemService_GetItems_Call{Call: _e.mock.On("GetItems", ctx, library, _a2)}
}

func (_c *ItemService_GetItems_Call) Run(run func(ctx context.Context, library model.Library, _a2 *config.Library)) *ItemService_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Library), args[2].(*config.Library))
	})
	return _c
}

func (_c *ItemService_GetItems_Call) Return(_a0 []model.Item, _a1 error) *ItemService_GetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ItemService_GetItems_Call) RunAndReturn(run func(context.Context, model.Library, *config.Library) ([]model.Item, error)) *ItemService_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// NewItemService creates a new instance of ItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemService {
	mock := &ItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
