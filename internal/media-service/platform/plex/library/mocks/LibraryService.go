// Code generated by mockery. DO NOT EDIT.

package plex_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// LibraryService is an autogenerated mock type for the LibraryService type
type LibraryService struct {
	mock.Mock
}

type LibraryService_Expecter struct {
	mock *mock.Mock
}

func (_m *LibraryService) EXPECT() *LibraryService_Expecter {
	return &LibraryService_Expecter{mock: &_m.Mock}
}

// GetLibraries provides a mock function with given fields: ctx
func (_m *LibraryService) GetLibraries(ctx context.Context) ([]model.Library, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLibraries")
	}

	var r0 []model.Library
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Library, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Library); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Library)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LibraryService_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type LibraryService_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LibraryService_Expecter) GetLibraries(ctx interface{}) *LibraryService_GetLibraries_Call {
	return &LibraryService_GetLibraries_Call{Call: _e.mock.On("GetLibraries", ctx)}
}

func (_c *LibraryService_GetLibraries_Call) Run(run func(ctx context.Context)) *LibraryService_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LibraryService_GetLibraries_Call) Return(_a0 []model.Library, _a1 error) *LibraryService_GetLibraries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LibraryService_GetLibraries_Call) RunAndReturn(run func(context.Context) ([]model.Library, error)) *LibraryService_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshLibrary provides a mock function with given fields: ctx, libraryID, force
func (_m *LibraryService) RefreshLibrary(ctx context.Context, libraryID string, force bool) error {
	ret := _m.Called(ctx, libraryID, force)

	if len(ret) == 0 {
		panic("no return value specified for RefreshLibrary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, libraryID, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LibraryService_RefreshLibrary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshLibrary'
type LibraryService_RefreshLibrary_Call struct {
	*mock.Call
}

// RefreshLibrary is a helper method to define mock.On call
//   - ctx context.Context
//   - libraryID string
//   - force bool
func (_e *LibraryService_Expecter) RefreshLibrary(ctx interface{}, libraryID interface{}, force interface{}) *LibraryService_RefreshLibrary_Call {
	return &LibraryService_RefreshLibrary_Call{Call: _e.mock.On("RefreshLibrary", ctx, libraryID, force)}
}

func (_c *LibraryService_RefreshLibrary_Call) Run(run func(ctx context.Context, libraryID string, force bool)) *LibraryService_RefreshLibrary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *LibraryService_RefreshLibrary_Call) Return(_a0 error) *LibraryService_RefreshLibrary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryService_RefreshLibrary_Call) RunAndReturn(run func(context.Context, string, bool) error) *LibraryService_RefreshLibrary_Call {
	_c.Call.Return(run)
	return _c
}

// NewLibraryService creates a new instance of LibraryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLibraryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LibraryService {
	mock := &LibraryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
