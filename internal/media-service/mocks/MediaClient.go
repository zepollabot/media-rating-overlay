// Code generated by mockery. DO NOT EDIT.

package media_mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	media "github.com/zepollabot/media-rating-overlay/internal/media-service"

	url "net/url"
)

// MediaClient is an autogenerated mock type for the MediaClient type
type MediaClient struct {
	mock.Mock
}

type MediaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaClient) EXPECT() *MediaClient_Expecter {
	return &MediaClient_Expecter{mock: &_m.Mock}
}

// DoWithMediaResponse provides a mock function with given fields: request
func (_m *MediaClient) DoWithMediaResponse(request *http.Request) (media.MediaResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DoWithMediaResponse")
	}

	var r0 media.MediaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (media.MediaResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) media.MediaResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(media.MediaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaClient_DoWithMediaResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoWithMediaResponse'
type MediaClient_DoWithMediaResponse_Call struct {
	*mock.Call
}

// DoWithMediaResponse is a helper method to define mock.On call
//   - request *http.Request
func (_e *MediaClient_Expecter) DoWithMediaResponse(request interface{}) *MediaClient_DoWithMediaResponse_Call {
	return &MediaClient_DoWithMediaResponse_Call{Call: _e.mock.On("DoWithMediaResponse", request)}
}

func (_c *MediaClient_DoWithMediaResponse_Call) Run(run func(request *http.Request)) *MediaClient_DoWithMediaResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MediaClient_DoWithMediaResponse_Call) Return(_a0 media.MediaResponse, _a1 error) *MediaClient_DoWithMediaResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MediaClient_DoWithMediaResponse_Call) RunAndReturn(run func(*http.Request) (media.MediaResponse, error)) *MediaClient_DoWithMediaResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DoWithResponse provides a mock function with given fields: request
func (_m *MediaClient) DoWithResponse(request *http.Request) (*http.Response, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DoWithResponse")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaClient_DoWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoWithResponse'
type MediaClient_DoWithResponse_Call struct {
	*mock.Call
}

// DoWithResponse is a helper method to define mock.On call
//   - request *http.Request
func (_e *MediaClient_Expecter) DoWithResponse(request interface{}) *MediaClient_DoWithResponse_Call {
	return &MediaClient_DoWithResponse_Call{Call: _e.mock.On("DoWithResponse", request)}
}

func (_c *MediaClient_DoWithResponse_Call) Run(run func(request *http.Request)) *MediaClient_DoWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MediaClient_DoWithResponse_Call) Return(_a0 *http.Response, _a1 error) *MediaClient_DoWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MediaClient_DoWithResponse_Call) RunAndReturn(run func(*http.Request) (*http.Response, error)) *MediaClient_DoWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBaseUrl provides a mock function with no fields
func (_m *MediaClient) GetBaseUrl() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseUrl")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// MediaClient_GetBaseUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseUrl'
type MediaClient_GetBaseUrl_Call struct {
	*mock.Call
}

// GetBaseUrl is a helper method to define mock.On call
func (_e *MediaClient_Expecter) GetBaseUrl() *MediaClient_GetBaseUrl_Call {
	return &MediaClient_GetBaseUrl_Call{Call: _e.mock.On("GetBaseUrl")}
}

func (_c *MediaClient_GetBaseUrl_Call) Run(run func()) *MediaClient_GetBaseUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MediaClient_GetBaseUrl_Call) Return(_a0 *url.URL) *MediaClient_GetBaseUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaClient_GetBaseUrl_Call) RunAndReturn(run func() *url.URL) *MediaClient_GetBaseUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMediaClient creates a new instance of MediaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaClient {
	mock := &MediaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
