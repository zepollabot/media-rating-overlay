// Code generated by mockery. DO NOT EDIT.

package media_mocks

import (
	http "net/http"

	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// FilterService is an autogenerated mock type for the FilterService type
type FilterService struct {
	mock.Mock
}

type FilterService_Expecter struct {
	mock *mock.Mock
}

func (_m *FilterService) EXPECT() *FilterService_Expecter {
	return &FilterService_Expecter{mock: &_m.Mock}
}

// ApplyFiltersToRequest provides a mock function with given fields: request, filters
func (_m *FilterService) ApplyFiltersToRequest(request *http.Request, filters []model.Filter) {
	_m.Called(request, filters)
}

// FilterService_ApplyFiltersToRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyFiltersToRequest'
type FilterService_ApplyFiltersToRequest_Call struct {
	*mock.Call
}

// ApplyFiltersToRequest is a helper method to define mock.On call
//   - request *http.Request
//   - filters []model.Filter
func (_e *FilterService_Expecter) ApplyFiltersToRequest(request interface{}, filters interface{}) *FilterService_ApplyFiltersToRequest_Call {
	return &FilterService_ApplyFiltersToRequest_Call{Call: _e.mock.On("ApplyFiltersToRequest", request, filters)}
}

func (_c *FilterService_ApplyFiltersToRequest_Call) Run(run func(request *http.Request, filters []model.Filter)) *FilterService_ApplyFiltersToRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].([]model.Filter))
	})
	return _c
}

func (_c *FilterService_ApplyFiltersToRequest_Call) Return() *FilterService_ApplyFiltersToRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *FilterService_ApplyFiltersToRequest_Call) RunAndReturn(run func(*http.Request, []model.Filter)) *FilterService_ApplyFiltersToRequest_Call {
	_c.Run(run)
	return _c
}

// ConvertConfigFiltersToRequestFilters provides a mock function with given fields: _a0
func (_m *FilterService) ConvertConfigFiltersToRequestFilters(_a0 *config.Library) []model.Filter {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConvertConfigFiltersToRequestFilters")
	}

	var r0 []model.Filter
	if rf, ok := ret.Get(0).(func(*config.Library) []model.Filter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Filter)
		}
	}

	return r0
}

// FilterService_ConvertConfigFiltersToRequestFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertConfigFiltersToRequestFilters'
type FilterService_ConvertConfigFiltersToRequestFilters_Call struct {
	*mock.Call
}

// ConvertConfigFiltersToRequestFilters is a helper method to define mock.On call
//   - _a0 *config.Library
func (_e *FilterService_Expecter) ConvertConfigFiltersToRequestFilters(_a0 interface{}) *FilterService_ConvertConfigFiltersToRequestFilters_Call {
	return &FilterService_ConvertConfigFiltersToRequestFilters_Call{Call: _e.mock.On("ConvertConfigFiltersToRequestFilters", _a0)}
}

func (_c *FilterService_ConvertConfigFiltersToRequestFilters_Call) Run(run func(_a0 *config.Library)) *FilterService_ConvertConfigFiltersToRequestFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Library))
	})
	return _c
}

func (_c *FilterService_ConvertConfigFiltersToRequestFilters_Call) Return(_a0 []model.Filter) *FilterService_ConvertConfigFiltersToRequestFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FilterService_ConvertConfigFiltersToRequestFilters_Call) RunAndReturn(run func(*config.Library) []model.Filter) *FilterService_ConvertConfigFiltersToRequestFilters_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilterService creates a new instance of FilterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterService {
	mock := &FilterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
