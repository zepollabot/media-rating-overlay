// Code generated by mockery. DO NOT EDIT.

package media_mocks

import (
	context "context"

	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// PosterService is an autogenerated mock type for the PosterService type
type PosterService struct {
	mock.Mock
}

type PosterService_Expecter struct {
	mock *mock.Mock
}

func (_m *PosterService) EXPECT() *PosterService_Expecter {
	return &PosterService_Expecter{mock: &_m.Mock}
}

// EnsurePosterExists provides a mock function with given fields: ctx, item, _a2
func (_m *PosterService) EnsurePosterExists(ctx context.Context, item model.Item, _a2 *config.Library) error {
	ret := _m.Called(ctx, item, _a2)

	if len(ret) == 0 {
		panic("no return value specified for EnsurePosterExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Item, *config.Library) error); ok {
		r0 = rf(ctx, item, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PosterService_EnsurePosterExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsurePosterExists'
type PosterService_EnsurePosterExists_Call struct {
	*mock.Call
}

// EnsurePosterExists is a helper method to define mock.On call
//   - ctx context.Context
//   - item model.Item
//   - _a2 *config.Library
func (_e *PosterService_Expecter) EnsurePosterExists(ctx interface{}, item interface{}, _a2 interface{}) *PosterService_EnsurePosterExists_Call {
	return &PosterService_EnsurePosterExists_Call{Call: _e.mock.On("EnsurePosterExists", ctx, item, _a2)}
}

func (_c *PosterService_EnsurePosterExists_Call) Run(run func(ctx context.Context, item model.Item, _a2 *config.Library)) *PosterService_EnsurePosterExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Item), args[2].(*config.Library))
	})
	return _c
}

func (_c *PosterService_EnsurePosterExists_Call) Return(_a0 error) *PosterService_EnsurePosterExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PosterService_EnsurePosterExists_Call) RunAndReturn(run func(context.Context, model.Item, *config.Library) error) *PosterService_EnsurePosterExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosterDiskPosition provides a mock function with given fields: ctx, item, _a2
func (_m *PosterService) GetPosterDiskPosition(ctx context.Context, item model.Item, _a2 *config.Library) (string, error) {
	ret := _m.Called(ctx, item, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetPosterDiskPosition")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Item, *config.Library) (string, error)); ok {
		return rf(ctx, item, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Item, *config.Library) string); ok {
		r0 = rf(ctx, item, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Item, *config.Library) error); ok {
		r1 = rf(ctx, item, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PosterService_GetPosterDiskPosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosterDiskPosition'
type PosterService_GetPosterDiskPosition_Call struct {
	*mock.Call
}

// GetPosterDiskPosition is a helper method to define mock.On call
//   - ctx context.Context
//   - item model.Item
//   - _a2 *config.Library
func (_e *PosterService_Expecter) GetPosterDiskPosition(ctx interface{}, item interface{}, _a2 interface{}) *PosterService_GetPosterDiskPosition_Call {
	return &PosterService_GetPosterDiskPosition_Call{Call: _e.mock.On("GetPosterDiskPosition", ctx, item, _a2)}
}

func (_c *PosterService_GetPosterDiskPosition_Call) Run(run func(ctx context.Context, item model.Item, _a2 *config.Library)) *PosterService_GetPosterDiskPosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Item), args[2].(*config.Library))
	})
	return _c
}

func (_c *PosterService_GetPosterDiskPosition_Call) Return(_a0 string, _a1 error) *PosterService_GetPosterDiskPosition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PosterService_GetPosterDiskPosition_Call) RunAndReturn(run func(context.Context, model.Item, *config.Library) (string, error)) *PosterService_GetPosterDiskPosition_Call {
	_c.Call.Return(run)
	return _c
}

// NewPosterService creates a new instance of PosterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPosterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PosterService {
	mock := &PosterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
