// Code generated by mockery. DO NOT EDIT.

package ports_mocks

import mock "github.com/stretchr/testify/mock"

// PosterStorage is an autogenerated mock type for the PosterStorage type
type PosterStorage struct {
	mock.Mock
}

type PosterStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PosterStorage) EXPECT() *PosterStorage_Expecter {
	return &PosterStorage_Expecter{mock: &_m.Mock}
}

// CheckIfPosterExists provides a mock function with given fields: path
func (_m *PosterStorage) CheckIfPosterExists(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfPosterExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PosterStorage_CheckIfPosterExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfPosterExists'
type PosterStorage_CheckIfPosterExists_Call struct {
	*mock.Call
}

// CheckIfPosterExists is a helper method to define mock.On call
//   - path string
func (_e *PosterStorage_Expecter) CheckIfPosterExists(path interface{}) *PosterStorage_CheckIfPosterExists_Call {
	return &PosterStorage_CheckIfPosterExists_Call{Call: _e.mock.On("CheckIfPosterExists", path)}
}

func (_c *PosterStorage_CheckIfPosterExists_Call) Run(run func(path string)) *PosterStorage_CheckIfPosterExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PosterStorage_CheckIfPosterExists_Call) Return(_a0 bool, _a1 error) *PosterStorage_CheckIfPosterExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PosterStorage_CheckIfPosterExists_Call) RunAndReturn(run func(string) (bool, error)) *PosterStorage_CheckIfPosterExists_Call {
	_c.Call.Return(run)
	return _c
}

// SavePoster provides a mock function with given fields: path, data
func (_m *PosterStorage) SavePoster(path string, data []byte) error {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for SavePoster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PosterStorage_SavePoster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePoster'
type PosterStorage_SavePoster_Call struct {
	*mock.Call
}

// SavePoster is a helper method to define mock.On call
//   - path string
//   - data []byte
func (_e *PosterStorage_Expecter) SavePoster(path interface{}, data interface{}) *PosterStorage_SavePoster_Call {
	return &PosterStorage_SavePoster_Call{Call: _e.mock.On("SavePoster", path, data)}
}

func (_c *PosterStorage_SavePoster_Call) Run(run func(path string, data []byte)) *PosterStorage_SavePoster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *PosterStorage_SavePoster_Call) Return(_a0 error) *PosterStorage_SavePoster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PosterStorage_SavePoster_Call) RunAndReturn(run func(string, []byte) error) *PosterStorage_SavePoster_Call {
	_c.Call.Return(run)
	return _c
}

// NewPosterStorage creates a new instance of PosterStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPosterStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *PosterStorage {
	mock := &PosterStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
