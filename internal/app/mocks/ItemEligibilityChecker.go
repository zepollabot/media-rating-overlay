// Code generated by mockery. DO NOT EDIT.

package core_mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// ItemEligibilityChecker is an autogenerated mock type for the ItemEligibilityChecker type
type ItemEligibilityChecker struct {
	mock.Mock
}

type ItemEligibilityChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *ItemEligibilityChecker) EXPECT() *ItemEligibilityChecker_Expecter {
	return &ItemEligibilityChecker_Expecter{mock: &_m.Mock}
}

// IsEligible provides a mock function with given fields: item
func (_m *ItemEligibilityChecker) IsEligible(item *model.Item) bool {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for IsEligible")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Item) bool); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ItemEligibilityChecker_IsEligible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEligible'
type ItemEligibilityChecker_IsEligible_Call struct {
	*mock.Call
}

// IsEligible is a helper method to define mock.On call
//   - item *model.Item
func (_e *ItemEligibilityChecker_Expecter) IsEligible(item interface{}) *ItemEligibilityChecker_IsEligible_Call {
	return &ItemEligibilityChecker_IsEligible_Call{Call: _e.mock.On("IsEligible", item)}
}

func (_c *ItemEligibilityChecker_IsEligible_Call) Run(run func(item *model.Item)) *ItemEligibilityChecker_IsEligible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Item))
	})
	return _c
}

func (_c *ItemEligibilityChecker_IsEligible_Call) Return(_a0 bool) *ItemEligibilityChecker_IsEligible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ItemEligibilityChecker_IsEligible_Call) RunAndReturn(run func(*model.Item) bool) *ItemEligibilityChecker_IsEligible_Call {
	_c.Call.Return(run)
	return _c
}

// NewItemEligibilityChecker creates a new instance of ItemEligibilityChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemEligibilityChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemEligibilityChecker {
	mock := &ItemEligibilityChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
