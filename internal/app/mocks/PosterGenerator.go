// Code generated by mockery. DO NOT EDIT.

package core_mocks

import (
	context "context"

	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// PosterGenerator is an autogenerated mock type for the PosterGenerator type
type PosterGenerator struct {
	mock.Mock
}

type PosterGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *PosterGenerator) EXPECT() *PosterGenerator_Expecter {
	return &PosterGenerator_Expecter{mock: &_m.Mock}
}

// ApplyLogos provides a mock function with given fields: ctx, filePath, _a2, item
func (_m *PosterGenerator) ApplyLogos(ctx context.Context, filePath string, _a2 *config.Library, item model.Item) (string, error) {
	ret := _m.Called(ctx, filePath, _a2, item)

	if len(ret) == 0 {
		panic("no return value specified for ApplyLogos")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *config.Library, model.Item) (string, error)); ok {
		return rf(ctx, filePath, _a2, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *config.Library, model.Item) string); ok {
		r0 = rf(ctx, filePath, _a2, item)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *config.Library, model.Item) error); ok {
		r1 = rf(ctx, filePath, _a2, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PosterGenerator_ApplyLogos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyLogos'
type PosterGenerator_ApplyLogos_Call struct {
	*mock.Call
}

// ApplyLogos is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
//   - _a2 *config.Library
//   - item model.Item
func (_e *PosterGenerator_Expecter) ApplyLogos(ctx interface{}, filePath interface{}, _a2 interface{}, item interface{}) *PosterGenerator_ApplyLogos_Call {
	return &PosterGenerator_ApplyLogos_Call{Call: _e.mock.On("ApplyLogos", ctx, filePath, _a2, item)}
}

func (_c *PosterGenerator_ApplyLogos_Call) Run(run func(ctx context.Context, filePath string, _a2 *config.Library, item model.Item)) *PosterGenerator_ApplyLogos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*config.Library), args[3].(model.Item))
	})
	return _c
}

func (_c *PosterGenerator_ApplyLogos_Call) Return(_a0 string, _a1 error) *PosterGenerator_ApplyLogos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PosterGenerator_ApplyLogos_Call) RunAndReturn(run func(context.Context, string, *config.Library, model.Item) (string, error)) *PosterGenerator_ApplyLogos_Call {
	_c.Call.Return(run)
	return _c
}

// NewPosterGenerator creates a new instance of PosterGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPosterGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PosterGenerator {
	mock := &PosterGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
