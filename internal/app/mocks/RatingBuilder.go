// Code generated by mockery. DO NOT EDIT.

package core_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// RatingBuilder is an autogenerated mock type for the RatingBuilder type
type RatingBuilder struct {
	mock.Mock
}

type RatingBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *RatingBuilder) EXPECT() *RatingBuilder_Expecter {
	return &RatingBuilder_Expecter{mock: &_m.Mock}
}

// BuildRatings provides a mock function with given fields: ctx, item
func (_m *RatingBuilder) BuildRatings(ctx context.Context, item *model.Item) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for BuildRatings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RatingBuilder_BuildRatings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildRatings'
type RatingBuilder_BuildRatings_Call struct {
	*mock.Call
}

// BuildRatings is a helper method to define mock.On call
//   - ctx context.Context
//   - item *model.Item
func (_e *RatingBuilder_Expecter) BuildRatings(ctx interface{}, item interface{}) *RatingBuilder_BuildRatings_Call {
	return &RatingBuilder_BuildRatings_Call{Call: _e.mock.On("BuildRatings", ctx, item)}
}

func (_c *RatingBuilder_BuildRatings_Call) Run(run func(ctx context.Context, item *model.Item)) *RatingBuilder_BuildRatings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Item))
	})
	return _c
}

func (_c *RatingBuilder_BuildRatings_Call) Return(_a0 error) *RatingBuilder_BuildRatings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RatingBuilder_BuildRatings_Call) RunAndReturn(run func(context.Context, *model.Item) error) *RatingBuilder_BuildRatings_Call {
	_c.Call.Return(run)
	return _c
}

// NewRatingBuilder creates a new instance of RatingBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingBuilder {
	mock := &RatingBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
