// Code generated by mockery. DO NOT EDIT.

package logo_mocks

import (
	gg "github.com/fogleman/gg"

	mock "github.com/stretchr/testify/mock"
)

// TextCreatorInterface is an autogenerated mock type for the TextCreatorInterface type
type TextCreatorInterface struct {
	mock.Mock
}

type TextCreatorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TextCreatorInterface) EXPECT() *TextCreatorInterface_Expecter {
	return &TextCreatorInterface_Expecter{mock: &_m.Mock}
}

// CreateContext provides a mock function with given fields: areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath
func (_m *TextCreatorInterface) CreateContext(areaWidth float64, areaHeight float64, horizontalMargin float64, fontHeightInPoints float64, text string, fontPath string) (*gg.Context, error) {
	ret := _m.Called(areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath)

	if len(ret) == 0 {
		panic("no return value specified for CreateContext")
	}

	var r0 *gg.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, string, string) (*gg.Context, error)); ok {
		return rf(areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64, string, string) *gg.Context); ok {
		r0 = rf(areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gg.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(float64, float64, float64, float64, string, string) error); ok {
		r1 = rf(areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TextCreatorInterface_CreateContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContext'
type TextCreatorInterface_CreateContext_Call struct {
	*mock.Call
}

// CreateContext is a helper method to define mock.On call
//   - areaWidth float64
//   - areaHeight float64
//   - horizontalMargin float64
//   - fontHeightInPoints float64
//   - text string
//   - fontPath string
func (_e *TextCreatorInterface_Expecter) CreateContext(areaWidth interface{}, areaHeight interface{}, horizontalMargin interface{}, fontHeightInPoints interface{}, text interface{}, fontPath interface{}) *TextCreatorInterface_CreateContext_Call {
	return &TextCreatorInterface_CreateContext_Call{Call: _e.mock.On("CreateContext", areaWidth, areaHeight, horizontalMargin, fontHeightInPoints, text, fontPath)}
}

func (_c *TextCreatorInterface_CreateContext_Call) Run(run func(areaWidth float64, areaHeight float64, horizontalMargin float64, fontHeightInPoints float64, text string, fontPath string)) *TextCreatorInterface_CreateContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64), args[3].(float64), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *TextCreatorInterface_CreateContext_Call) Return(_a0 *gg.Context, _a1 error) *TextCreatorInterface_CreateContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TextCreatorInterface_CreateContext_Call) RunAndReturn(run func(float64, float64, float64, float64, string, string) (*gg.Context, error)) *TextCreatorInterface_CreateContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewTextCreatorInterface creates a new instance of TextCreatorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextCreatorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextCreatorInterface {
	mock := &TextCreatorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
