// Code generated by mockery. DO NOT EDIT.

package poster_mocks

import (
	gg "github.com/fogleman/gg"
	config "github.com/zepollabot/media-rating-overlay/internal/config/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// OverlayService is an autogenerated mock type for the OverlayService type
type OverlayService struct {
	mock.Mock
}

type OverlayService_Expecter struct {
	mock *mock.Mock
}

func (_m *OverlayService) EXPECT() *OverlayService_Expecter {
	return &OverlayService_Expecter{mock: &_m.Mock}
}

// CreateDrawContextWithOverlay provides a mock function with given fields: filePath, item, _a2
func (_m *OverlayService) CreateDrawContextWithOverlay(filePath string, item model.Item, _a2 *config.Library) (*gg.Context, error) {
	ret := _m.Called(filePath, item, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateDrawContextWithOverlay")
	}

	var r0 *gg.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.Item, *config.Library) (*gg.Context, error)); ok {
		return rf(filePath, item, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, model.Item, *config.Library) *gg.Context); ok {
		r0 = rf(filePath, item, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gg.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.Item, *config.Library) error); ok {
		r1 = rf(filePath, item, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverlayService_CreateDrawContextWithOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDrawContextWithOverlay'
type OverlayService_CreateDrawContextWithOverlay_Call struct {
	*mock.Call
}

// CreateDrawContextWithOverlay is a helper method to define mock.On call
//   - filePath string
//   - item model.Item
//   - _a2 *config.Library
func (_e *OverlayService_Expecter) CreateDrawContextWithOverlay(filePath interface{}, item interface{}, _a2 interface{}) *OverlayService_CreateDrawContextWithOverlay_Call {
	return &OverlayService_CreateDrawContextWithOverlay_Call{Call: _e.mock.On("CreateDrawContextWithOverlay", filePath, item, _a2)}
}

func (_c *OverlayService_CreateDrawContextWithOverlay_Call) Run(run func(filePath string, item model.Item, _a2 *config.Library)) *OverlayService_CreateDrawContextWithOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.Item), args[2].(*config.Library))
	})
	return _c
}

func (_c *OverlayService_CreateDrawContextWithOverlay_Call) Return(_a0 *gg.Context, _a1 error) *OverlayService_CreateDrawContextWithOverlay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverlayService_CreateDrawContextWithOverlay_Call) RunAndReturn(run func(string, model.Item, *config.Library) (*gg.Context, error)) *OverlayService_CreateDrawContextWithOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// NewOverlayService creates a new instance of OverlayService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOverlayService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OverlayService {
	mock := &OverlayService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
