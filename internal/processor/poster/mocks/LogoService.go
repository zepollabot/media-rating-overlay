// Code generated by mockery. DO NOT EDIT.

package poster_mocks

import (
	gg "github.com/fogleman/gg"
	mock "github.com/stretchr/testify/mock"

	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// LogoService is an autogenerated mock type for the LogoService type
type LogoService struct {
	mock.Mock
}

type LogoService_Expecter struct {
	mock *mock.Mock
}

func (_m *LogoService) EXPECT() *LogoService_Expecter {
	return &LogoService_Expecter{mock: &_m.Mock}
}

// PositionLogos provides a mock function with given fields: logos, areaWidth, areaHeight, visualDebug
func (_m *LogoService) PositionLogos(logos []*model.Logo, areaWidth float64, areaHeight float64, visualDebug bool) (*gg.Context, error) {
	ret := _m.Called(logos, areaWidth, areaHeight, visualDebug)

	if len(ret) == 0 {
		panic("no return value specified for PositionLogos")
	}

	var r0 *gg.Context
	var r1 error
	if rf, ok := ret.Get(0).(func([]*model.Logo, float64, float64, bool) (*gg.Context, error)); ok {
		return rf(logos, areaWidth, areaHeight, visualDebug)
	}
	if rf, ok := ret.Get(0).(func([]*model.Logo, float64, float64, bool) *gg.Context); ok {
		r0 = rf(logos, areaWidth, areaHeight, visualDebug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gg.Context)
		}
	}

	if rf, ok := ret.Get(1).(func([]*model.Logo, float64, float64, bool) error); ok {
		r1 = rf(logos, areaWidth, areaHeight, visualDebug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoService_PositionLogos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PositionLogos'
type LogoService_PositionLogos_Call struct {
	*mock.Call
}

// PositionLogos is a helper method to define mock.On call
//   - logos []*model.Logo
//   - areaWidth float64
//   - areaHeight float64
//   - visualDebug bool
func (_e *LogoService_Expecter) PositionLogos(logos interface{}, areaWidth interface{}, areaHeight interface{}, visualDebug interface{}) *LogoService_PositionLogos_Call {
	return &LogoService_PositionLogos_Call{Call: _e.mock.On("PositionLogos", logos, areaWidth, areaHeight, visualDebug)}
}

func (_c *LogoService_PositionLogos_Call) Run(run func(logos []*model.Logo, areaWidth float64, areaHeight float64, visualDebug bool)) *LogoService_PositionLogos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.Logo), args[1].(float64), args[2].(float64), args[3].(bool))
	})
	return _c
}

func (_c *LogoService_PositionLogos_Call) Return(_a0 *gg.Context, _a1 error) *LogoService_PositionLogos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogoService_PositionLogos_Call) RunAndReturn(run func([]*model.Logo, float64, float64, bool) (*gg.Context, error)) *LogoService_PositionLogos_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogoService creates a new instance of LogoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoService {
	mock := &LogoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
