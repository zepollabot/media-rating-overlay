// Code generated by mockery. DO NOT EDIT.

package overlay_mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zepollabot/media-rating-overlay/internal/model"
)

// OverlayFactory is an autogenerated mock type for the OverlayFactory type
type OverlayFactory struct {
	mock.Mock
}

type OverlayFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *OverlayFactory) EXPECT() *OverlayFactory_Expecter {
	return &OverlayFactory_Expecter{mock: &_m.Mock}
}

// CreateOverlay provides a mock function with given fields: overlayType
func (_m *OverlayFactory) CreateOverlay(overlayType string) (model.Overlay, error) {
	ret := _m.Called(overlayType)

	if len(ret) == 0 {
		panic("no return value specified for CreateOverlay")
	}

	var r0 model.Overlay
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Overlay, error)); ok {
		return rf(overlayType)
	}
	if rf, ok := ret.Get(0).(func(string) model.Overlay); ok {
		r0 = rf(overlayType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Overlay)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(overlayType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverlayFactory_CreateOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOverlay'
type OverlayFactory_CreateOverlay_Call struct {
	*mock.Call
}

// CreateOverlay is a helper method to define mock.On call
//   - overlayType string
func (_e *OverlayFactory_Expecter) CreateOverlay(overlayType interface{}) *OverlayFactory_CreateOverlay_Call {
	return &OverlayFactory_CreateOverlay_Call{Call: _e.mock.On("CreateOverlay", overlayType)}
}

func (_c *OverlayFactory_CreateOverlay_Call) Run(run func(overlayType string)) *OverlayFactory_CreateOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverlayFactory_CreateOverlay_Call) Return(_a0 model.Overlay, _a1 error) *OverlayFactory_CreateOverlay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverlayFactory_CreateOverlay_Call) RunAndReturn(run func(string) (model.Overlay, error)) *OverlayFactory_CreateOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// NewOverlayFactory creates a new instance of OverlayFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOverlayFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *OverlayFactory {
	mock := &OverlayFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
