// Code generated by mockery. DO NOT EDIT.

package image_mocks

import mock "github.com/stretchr/testify/mock"

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

type FileManager_Expecter struct {
	mock *mock.Mock
}

func (_m *FileManager) EXPECT() *FileManager_Expecter {
	return &FileManager_Expecter{mock: &_m.Mock}
}

// BackupExistingPoster provides a mock function with given fields: filePath
func (_m *FileManager) BackupExistingPoster(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for BackupExistingPoster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileManager_BackupExistingPoster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupExistingPoster'
type FileManager_BackupExistingPoster_Call struct {
	*mock.Call
}

// BackupExistingPoster is a helper method to define mock.On call
//   - filePath string
func (_e *FileManager_Expecter) BackupExistingPoster(filePath interface{}) *FileManager_BackupExistingPoster_Call {
	return &FileManager_BackupExistingPoster_Call{Call: _e.mock.On("BackupExistingPoster", filePath)}
}

func (_c *FileManager_BackupExistingPoster_Call) Run(run func(filePath string)) *FileManager_BackupExistingPoster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileManager_BackupExistingPoster_Call) Return(_a0 error) *FileManager_BackupExistingPoster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileManager_BackupExistingPoster_Call) RunAndReturn(run func(string) error) *FileManager_BackupExistingPoster_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePosterFilePath provides a mock function with given fields: filePath, ext
func (_m *FileManager) GeneratePosterFilePath(filePath string, ext string) string {
	ret := _m.Called(filePath, ext)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePosterFilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(filePath, ext)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FileManager_GeneratePosterFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePosterFilePath'
type FileManager_GeneratePosterFilePath_Call struct {
	*mock.Call
}

// GeneratePosterFilePath is a helper method to define mock.On call
//   - filePath string
//   - ext string
func (_e *FileManager_Expecter) GeneratePosterFilePath(filePath interface{}, ext interface{}) *FileManager_GeneratePosterFilePath_Call {
	return &FileManager_GeneratePosterFilePath_Call{Call: _e.mock.On("GeneratePosterFilePath", filePath, ext)}
}

func (_c *FileManager_GeneratePosterFilePath_Call) Run(run func(filePath string, ext string)) *FileManager_GeneratePosterFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *FileManager_GeneratePosterFilePath_Call) Return(_a0 string) *FileManager_GeneratePosterFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileManager_GeneratePosterFilePath_Call) RunAndReturn(run func(string, string) string) *FileManager_GeneratePosterFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileManager creates a new instance of FileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileManager {
	mock := &FileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
