// Code generated by mockery. DO NOT EDIT.

package text_mocks

import mock "github.com/stretchr/testify/mock"

// TextGuesser is an autogenerated mock type for the TextGuesser type
type TextGuesser struct {
	mock.Mock
}

type TextGuesser_Expecter struct {
	mock *mock.Mock
}

func (_m *TextGuesser) EXPECT() *TextGuesser_Expecter {
	return &TextGuesser_Expecter{mock: &_m.Mock}
}

// FindTextMaxPoints provides a mock function with given fields: imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits
func (_m *TextGuesser) FindTextMaxPoints(imageWidth float64, areaWidth float64, areaHeight float64, fontPath string, numberOfDigits int) (float64, float64, float64, error) {
	ret := _m.Called(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)

	if len(ret) == 0 {
		panic("no return value specified for FindTextMaxPoints")
	}

	var r0 float64
	var r1 float64
	var r2 float64
	var r3 error
	if rf, ok := ret.Get(0).(func(float64, float64, float64, string, int) (float64, float64, float64, error)); ok {
		return rf(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, float64, string, int) float64); ok {
		r0 = rf(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(float64, float64, float64, string, int) float64); ok {
		r1 = rf(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(float64, float64, float64, string, int) float64); ok {
		r2 = rf(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(float64, float64, float64, string, int) error); ok {
		r3 = rf(imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// TextGuesser_FindTextMaxPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTextMaxPoints'
type TextGuesser_FindTextMaxPoints_Call struct {
	*mock.Call
}

// FindTextMaxPoints is a helper method to define mock.On call
//   - imageWidth float64
//   - areaWidth float64
//   - areaHeight float64
//   - fontPath string
//   - numberOfDigits int
func (_e *TextGuesser_Expecter) FindTextMaxPoints(imageWidth interface{}, areaWidth interface{}, areaHeight interface{}, fontPath interface{}, numberOfDigits interface{}) *TextGuesser_FindTextMaxPoints_Call {
	return &TextGuesser_FindTextMaxPoints_Call{Call: _e.mock.On("FindTextMaxPoints", imageWidth, areaWidth, areaHeight, fontPath, numberOfDigits)}
}

func (_c *TextGuesser_FindTextMaxPoints_Call) Run(run func(imageWidth float64, areaWidth float64, areaHeight float64, fontPath string, numberOfDigits int)) *TextGuesser_FindTextMaxPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *TextGuesser_FindTextMaxPoints_Call) Return(_a0 float64, _a1 float64, _a2 float64, _a3 error) *TextGuesser_FindTextMaxPoints_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *TextGuesser_FindTextMaxPoints_Call) RunAndReturn(run func(float64, float64, float64, string, int) (float64, float64, float64, error)) *TextGuesser_FindTextMaxPoints_Call {
	_c.Call.Return(run)
	return _c
}

// NewTextGuesser creates a new instance of TextGuesser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextGuesser(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextGuesser {
	mock := &TextGuesser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
